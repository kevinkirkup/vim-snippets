priority -50

extends c

# We want to overwrite everything in parent ft.
priority -49
###########################################################################
#			    Global functions 						  #
###########################################################################

global !p

def write_docstring_args(arglist, snip):
	args = str(arglist).split(',')

	if len(args) > 1:
		c = 0
		for arg in args:
			if c == 0:
				snip.rv += arg
				c = 1
			else:
				snip += '*       : %s' % arg.strip()
	else:
		snip.rv = args[0]


endglobal

###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet beginend "$1.begin(), $1.end() (beginend)"
${1:v}${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}begin(), $1${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}end()
endsnippet

snippet cl "class .. (class)"
class ${1:`!p snip.rv = snip.basename or "name"`} {
public:
	${1/(\w+).*/$1/} (${2:arguments});
	virtual
		~${1/(\w+).*/$1/} ();

	//////////////////////////////////////////////////
	// Private Methods
	//////////////////////////////////////////////////

	//////////////////////////////////////////////////
	// Private Fields
	//////////////////////////////////////////////////

	${0:/* data */}
};
endsnippet

snippet ns "namespace .. (namespace)"
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`}
{
	${VISUAL}$0
}${1/.+/ \/* /m}$1${1/.+/ *\/ /m}
endsnippet

snippet readfile "read file (readF)"
std::vector<char> v;
if (FILE *fp = fopen(${1:"filename"}, "r")) {

	char buf[1024];
	while(size_t len = fread(buf, 1, sizeof(buf), fp))
		v.insert(v.end(), buf, buf + len);
	fclose(fp);
}
endsnippet

snippet map "std::map (map)"
std::map<${1:key}, ${2:value}> map$0;
endsnippet

snippet vector "std::vector (v)"
std::vector<${1:char}> v$0;
endsnippet

snippet tp "template <typename ..> (template)"
template <typename ${1:_InputIter}>
endsnippet

##################################################
# C++11
##################################################
snippet enumc "Class Enumeration"
enum class ${1:name} { $0 };
endsnippet

##################################################
# Pragmas
##################################################
snippet once "Pragma once"
#pragma once
endsnippet

##################################################
# Section Documentation
##################################################
snippet fcl "Class Section" b
//////////////////////////////////////////////////////////////////////
/// @name Classes
//@{

$1

//@} End of Classes
endsnippet

##################################################
# Google Test snippets
##################################################
snippet gfh "Gmock Unit Test Header"
/*#################################################################
#   ____ _                 ____            _                      #
#  / ___(_)___  ___ ___   / ___| _   _ ___| |_ ___ _ __ ___  ___  #
# | |   | / __|/ __/ _ \  \___ \| | | / __| __/ _ \ '_ \` _ \/ __| #
# | |___| \__ \ (_| (_) |  ___) | |_| \__ \ ||  __/ | | | | \__ \ #
#  \____|_|___/\___\___/  |____/ \__, |___/\__\___|_| |_| |_|___/ #
#                                |___/                            #
#                                                                 #
###################################################################
# Copyright 2014 Cisco Systems (USA)                              #
# All rights, including trade secret rights, reserved.            #
#################################################################*/

//////////////////////////////////////////////////////////////////////
/// @name Includes
//@{

#include <gmock/gmock.h>

//@} End of Includes
endsnippet

snippet gt
TEST_F(${1:`!p snip.rv = snip.basename`}, ${2:my_kickass_unit_test_will_succeed}) { }
$3
endsnippet

snippet gcl
class ${1:`!p snip.rc = snip.basename`} : public ::testing::Test {
 public:

	$1() {}

	virtual
		~$1() {}

	/**
	 * Test Case Setup
	 */
	virtual void
		SetUp();

	/**
	 * Test Case tear down
	 */
	virtual void
		TearDown();

	//////////////////////////////////////////////////
	// Fields
	//////////////////////////////////////////////////
	$3
};

void $1::SetUp() { }
void $1::TearDown() { }
endsnippet

snippet gat
	ASSERT_TRUE(${1:TRUE});
	$2
endsnippet

snippet gaf
	ASSERT_FALSE(${1:FALSE});
	$2
endsnippet

snippet gae
	ASSERT_EQ(${1:Expected}, ${2:Result});
	$3
endsnippet

snippet gee
	EXPECT_EQ(${1:Expected}, ${2:Result});
	$3
endsnippet

snippet gf
	FAIL();
	$1
endsnippet

snippet gmec
	EXPECT_CALL(${1:instance}, ${2:Method(${3:matchers})})
		.WillRepeatedly(${4:Return(0)});
endsnippet

snippet cla "An entire .h generator" b
#ifndef ${2:`!v substitute(vim_snippets#Filename('$1_H','ClassName'),'.*','\U&\E','')`}
#define $2

class ${1:`!v substitute(substitute(vim_snippets#Filename('$1','ClassName'),'^.','\u&',''), '_\(\w\)', '\u\1', 'g')`}
{
private:
	$3

public:
	$1();
	virtual ~$1();
};

#endif /* $2 */
endsnippet


snippet fnc "Basic c++ doxygen function template" b
/**
* @brief: ${4:brief}
*
* @param: `!p write_docstring_args(t[3],snip)`
*
* @return: `!p snip.rv = t[1]`
*/
${1:ReturnType} ${2:FunctionName}(${3:param})
{
	${0:FunctionBody}
}
endsnippet
# vim:ft=snippets:
