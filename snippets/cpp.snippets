## STL Collections
# std::array
snippet array
	std::array<${1:T}, ${2:N}> ${3};
# std::vector
snippet vector
	std::vector<${1:T}> ${2};
# std::deque
snippet deque
	std::deque<${1:T}> ${2};
# std::forward_list
snippet flist
	std::forward_list<${1:T}> ${2};
# std::list
snippet list
	std::list<${1:T}> ${2};
# std::set
snippet set
	std::set<${1:T}> ${2};
# std::map
snippet map
	std::map<${1:Key}, ${2:T}> ${3};
# std::multiset
snippet mset
	std::multiset<${1:T}> ${2};
# std::multimap
snippet mmap
	std::multimap<${1:Key}, ${2:T}> ${3};
# std::unordered_set
snippet uset
	std::unordered_set<${1:T}> ${2};
# std::unordered_map
snippet umap
	std::unordered_map<${1:Key}, ${2:T}> ${3};
# std::unordered_multiset
snippet umset
	std::unordered_multiset<${1:T}> ${2};
# std::unordered_multimap
snippet ummap
	std::unordered_multimap<${1:Key}, ${2:T}> ${3};
# std::stack
snippet stack
	std::stack<${1:T}> ${2};
# std::queue
snippet queue
	std::queue<${1:T}> ${2};
# std::priority_queue
snippet pqueue
	std::priority_queue<${1:T}> ${2};
##
## Access Modifiers
# private
snippet pri
	private
# protected
snippet pro
	protected
# public
snippet pub
	public
# friend
snippet fr
	friend
# mutable
snippet mu
	mutable
##
## Class
# class
snippet cl
	class ${1:`vim_snippets#Filename('$1', 'name')`}
	{
	public:
		$1(${2});
		~$1();

	private:
		${0:/* data */}
	};
# member function implementation
snippet mfun
	${4:void} ${1:`vim_snippets#Filename('$1', 'ClassName')`}::${2:memberFunction}(${3}) {
		${0}
	}
# namespace
snippet ns
	namespace ${1:`vim_snippets#Filename('', 'my')`} {
		${0}
	} /* namespace $1 */
##
## Input/Output
# std::cout
snippet cout
	std::cout << ${1} << std::endl;
# std::cin
snippet cin
	std::cin >> ${1};
##
## Iteration
# for i
snippet fori
	for (int ${2:i} = 0; $2 < ${1:count}; $2${3:++}) {
		${4}
	}

# foreach
snippet fore
	for (${1:auto} ${2:i} : ${3:container}) {
		${4}
	}
# iterator
snippet iter
	for (${1:std::vector}<${2:type}>::${3:const_iterator} ${4:i} = ${5:container}.begin(); $4 != $5.end(); ++$4) {
		${6}
	}

# auto iterator
snippet itera
	for (auto ${1:i} = ${2:container}.begin(); $1 != $2.end(); ++$1) {
		${3:std::cout << *$1 << std::endl;}
	}
##
## Lambdas
# lamda (one line)
snippet ld
	[${1}](${2}){${3}}
# lambda (multi-line)
snippet lld
	[${1}](${2}){
		${3}
	}
# Method
snippet m
	//--------------------------------------------------
	${1:HRESULT}
	${2:C`Filename('$1', 'name')`}::${3:myMethod}(
		${4:params}) {

		$1 ${5:hr} = ${6:S_OK};

		return $5;
	}
# Method Prototype
snippet mp
	/**
	 * ${4:Description}
	 * $3
	 * @returns $1
	 */
	${1:HRESULT}
		${2:myMethod}(
				${3:params});
#Code block
snippet cb
	if (${1}SUCCEEDED(${2:hr})) {

		${3}

		if ($1FAILED($2)){
		}
	}
snippet hr
	HRESULT hr = S_OK;
snippet hrs
	if (SUCCEEDED(${1:hr}))
		${2:/* code */}
snippet hrf
	if (FAILED(${1:hr}))
		${2:/* code */}
snippet fh CPP Style File Header
	/*#################################################################
	#   ____ _                 ____            _                      #
	#  / ___(_)___  ___ ___   / ___| _   _ ___| |_ ___ _ __ ___  ___  #
	# | |   | / __|/ __/ _ \  \___ \| | | / __| __/ _ \ '_ ` _ \/ __| #
	# | |___| \__ \ (_| (_) |  ___) | |_| \__ \ ||  __/ | | | | \__ \ #
	#  \____|_|___/\___\___/  |____/ \__, |___/\__\___|_| |_| |_|___/ #
	#                                |___/                            #
	#                                                                 #
	###################################################################
	# Copyright 2014 Cisco Systems (USA)                              #
	# All rights, including trade secret rights, reserved.            #
	#################################################################*/
snippet hfh CPP Style File Header
	/*#################################################################
	#   ____ _                 ____            _                      #
	#  / ___(_)___  ___ ___   / ___| _   _ ___| |_ ___ _ __ ___  ___  #
	# | |   | / __|/ __/ _ \  \___ \| | | / __| __/ _ \ '_ ` _ \/ __| #
	# | |___| \__ \ (_| (_) |  ___) | |_| \__ \ ||  __/ | | | | \__ \ #
	#  \____|_|___/\___\___/  |____/ \__, |___/\__\___|_| |_| |_|___/ #
	#                                |___/                            #
	#                                                                 #
	###################################################################
	# Copyright 2012 Cisco Systems (USA)                              #
	# All rights, including trade secret rights, reserved.            #
	#################################################################*/
	#pragma once
	
	${1}
# File Classes
snippet fcl
	//////////////////////////////////////////////////////////////////////
	/// @name Classes
	//@{
	
	${1}
	
	//@} End of Classes
##################################################
# Google Test snippets
##################################################
snippet gfh
	/*#################################################################
	#   ____ _                 ____            _                      #
	#  / ___(_)___  ___ ___   / ___| _   _ ___| |_ ___ _ __ ___  ___  #
	# | |   | / __|/ __/ _ \  \___ \| | | / __| __/ _ \ '_ ` _ \/ __| #
	# | |___| \__ \ (_| (_) |  ___) | |_| \__ \ ||  __/ | | | | \__ \ #
	#  \____|_|___/\___\___/  |____/ \__, |___/\__\___|_| |_| |_|___/ #
	#                                |___/                            #
	#                                                                 #
	###################################################################
	# Copyright 2014 Cisco Systems (USA)                              #
	# All rights, including trade secret rights, reserved.            #
	#################################################################*/
	#pragma once

	#include <gmock/gmock.h>

snippet gt
	TEST_F(${1:`Filename('', 'my')`}, ${2:my_kickass_unit_test_will_succeed}) { }
	${3}
snippet gcl
	class ${1:`Filename('', 'my')`}: public ::testing::Test {

	public:

	  /**
	   * Constructor
	   */
	  $1(void) {}

	  /**
	   * Destructor
	   */
	  ~$1(void) {}

	  /**
	   * Test Case Setup
	   */
	  virtual void
	    SetUp(void);

	  /**
	   * Test Case Teardown
	   */
	  virtual void
	    TearDown(void);

		${3}

	};
snippet gat
	ASSERT_TRUE(${1:TRUE});
	${2}
snippet gaf
	ASSERT_FALSE(${1:FALSE});
	${2}
snippet gae
	ASSERT_EQ(${1:Expected}, ${2:Result});
	${3}
snippet gee
	EXPECT_EQ(${1:Expected}, ${2:Result});
	${3}
snippet gf
	FAIL();
	${1}
snippet gmec
	EXPECT_CALL(${1:instance}, ${2:Method(${3:matchers})})
		.WillRepeatedly(${4:Return(0)});
